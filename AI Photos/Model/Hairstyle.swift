//
//  Hairstyle.swift
//  AI Photos
//
//  Created by –ù–∏–∫–∏—Ç–∞ –ì–æ—Ä—å–∫–æ–≤–æ–π on 5.12.24.
//
import UIKit

struct HairstylePattern {
    var name: String
    var isMen: Bool
    var hairStyleText: String
    var modelImage: UIImage
}

struct Hairstyle: Identifiable, Codable {
    
    static let maxFreeHairstyles = 2
    
    @UserDefaultsValue(key: "Hairstyle.hairstyleRequestsCount", defaultValue: 0)
    static var hairstyleRequestsCount: Int
    
    static var hasFreeHairstyles: Bool {
            return hairstyleRequestsCount < maxFreeHairstyles
    }
    
    @UserDefaultsValue(key: "Hairstyle.all", defaultValue: [:])
    static var all: [UUID: Hairstyle]
    
    static let allUpdatedNotification = Notification.Name("Hairstyle.allUpdated")
    
    var id: UUID
    var name: String
    var isMan: Bool
    var isLike: Bool = false
    var isSelectedForDelete: Bool = false
    var isSelectedForCombine: Bool = false
    var creationDate: Date
    var rootText: String
    
    static let urlPost = ""
    static let urlGet = ""
    
    init(originalImage: UIImage, image: UIImage, isMan: Bool, name: String, rootText: String) {
        self.id = .init()
        self.creationDate = .init()
        self.name = name
        self.isMan = isMan
        self.rootText = rootText
        let data = image.pngData()
        try? FileManager.default.createDirectory(at: imageURL.deletingLastPathComponent(), withIntermediateDirectories: true)
        FileManager.default.createFile(atPath: imageURL.path, contents: data)
        let originalData = originalImage.pngData()
        try? FileManager.default.createDirectory(at: originalImageURL.deletingLastPathComponent(), withIntermediateDirectories: true)
        FileManager.default.createFile(atPath: originalImageURL.path, contents: originalData)
    }
    
    var imageURL: URL {
        let documentURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        return documentURL.appendingPathComponent("photoHair/\(id.uuidString).png")
    }
    
    var image: UIImage? {
        guard
            let data = try? Data(contentsOf: imageURL),
            let image = UIImage(data: data)
        else {
            return nil
        }
        return image
    }
    
    var originalImageURL: URL {
        let documentURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        return documentURL.appendingPathComponent("originalPhotoHair/\(id.uuidString).png")
    }
    
    var originalImage: UIImage? {
        guard
            let data = try? Data(contentsOf: originalImageURL),
            let image = UIImage(data: data)
        else {
            return nil
        }
        return image
    }
    
    func update() {
        Self.all[id] = self
        for (collectionId, var collection) in Collection.all {
            if let hairstyleIndex = collection.hairstyles.firstIndex(where: { $0.id == id }) {
                collection.hairstyles[hairstyleIndex] = self
                collection.update()
            }
        }
        DispatchQueue.main.async {
            NotificationCenter.default.post(name: Self.allUpdatedNotification, object: nil)
        }
        DispatchQueue.main.async {
            NotificationCenter.default.post(name: Collection.allUpdatedNotification, object: nil)
        }
    }
    
    static func deleteHairstyleAndFromCollections(at id: UUID) {
        for (collectionId, var collection) in Collection.all {
            if let index = collection.hairstyles.firstIndex(where: { $0.id == id }) {
                collection.hairstyles.remove(at: index)
                collection.update()
            }
        }
        Hairstyle.all.removeValue(forKey: id)
        DispatchQueue.main.async {
            NotificationCenter.default.post(name: Self.allUpdatedNotification, object: nil)
            NotificationCenter.default.post(name: Collection.allUpdatedNotification, object: nil)
        }
    }
    
    static func getImage(initImage: UIImage, isMen: Bool, hairStyle: String, completion: @escaping (UIImage?) -> Void) {
        
        func compressImage(_ image: UIImage, maxDimension: CGFloat = 2000, maxDataSizeMB: Int = 3) -> Data? {
            // 1. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –±–æ–ª—å—à–µ 2000
            let resizedImage = resizeIfNeeded(image, maxDimension: maxDimension)
            
            // 2. –ü—ã—Ç–∞–µ–º—Å—è —Å–∂–∞—Ç—å –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ —É–ª–æ–∂–∏–º—Å—è –≤ –ª–∏–º–∏—Ç 3 MB
            let maxDataSize = maxDataSizeMB * 1024 * 1024 // 3 MB –≤ –±–∞–π—Ç–∞—Ö
            var compression: CGFloat = 1.0
            
            guard var imageData = resizedImage.jpegData(compressionQuality: compression) else {
                return nil
            }
            
            // –ï—Å–ª–∏ –∏ –±–µ–∑ —Å–∂–∞—Ç–∏—è —Ä–∞–∑–º–µ—Ä —É–∂–µ –≤ –Ω–æ—Ä–º–µ, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–∞–∑—É
            if imageData.count <= maxDataSize {
                return imageData
            }
            
            // –ò–Ω–∞—á–µ —Å–∂–∏–º–∞–µ–º –≤ —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –Ω–µ —É–ª–æ–∂–∏–º—Å—è –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –º–∏–Ω–∏–º—É–º–∞
            while imageData.count > maxDataSize && compression > 0.01 {
                compression -= 0.05
                if let newData = resizedImage.jpegData(compressionQuality: compression) {
                    imageData = newData
                } else {
                    return nil // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å data
                }
            }
            
            // –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ª–∏–±–æ –º—ã —É–ª–æ–∂–∏–ª–∏—Å—å –≤ –ª–∏–º–∏—Ç, –ª–∏–±–æ –¥–æ—à–ª–∏ –¥–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã compression
            return imageData
        }

        /// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç `maxDimension`.
        /// –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç ‚Äî –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.
         func resizeIfNeeded(_ image: UIImage, maxDimension: CGFloat) -> UIImage {
            let width = image.size.width
            let height = image.size.height
            
            // –ï—Å–ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–∫ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç maxDimension, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ
            guard max(width, height) > maxDimension else {
                return image
            }
            
            // –°—á–∏—Ç–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            let ratio = maxDimension / max(width, height)
            let newWidth = width * ratio
            let newHeight = height * ratio
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            let newSize = CGSize(width: newWidth, height: newHeight)
            UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)
            image.draw(in: CGRect(origin: .zero, size: newSize))
            let newImage = UIGraphicsGetImageFromCurrentImageContext()
            UIGraphicsEndImageContext()
            
            // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ
            return newImage ?? image
        }
        
        print("üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É POST-–∑–∞–ø—Ä–æ—Å–∞...")
        
        // –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        guard let urlPost = URL(string: "") else {
            print("‚ùå Invalid URL")
            completion(nil)
            return
        }
        
        var requestPost = URLRequest(url: urlPost)
        requestPost.httpMethod = "POST"
        requestPost.timeoutInterval = 360
        
        // –°–æ–∑–¥–∞—ë–º boundary
        let boundary = "Boundary-\(UUID().uuidString)"
        requestPost.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Data
        guard let initImageData = compressImage(initImage) else {
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ initImage –≤ Data")
            completion(nil)
            return
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        var body = Data()
        
        // 1. –î–æ–±–∞–≤–ª—è–µ–º gender (string)
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"gender\"\r\n\r\n".data(using: .utf8)!)
        body.append(isMen ? "men".data(using: .utf8)! : "women".data(using: .utf8)!)
        body.append("\r\n".data(using: .utf8)!)
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º hair_style (string)
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"hair_style\"\r\n\r\n".data(using: .utf8)!)
        body.append(hairStyle.data(using: .utf8)!)
        body.append("\r\n".data(using: .utf8)!)
        
        // 3. –î–æ–±–∞–≤–ª—è–µ–º init_image (file)
        body.append("--\(boundary)\r\n".data(using: .utf8)!)
        body.append("Content-Disposition: form-data; name=\"image\"; filename=\"image.jpg\"\r\n".data(using: .utf8)!)
        body.append("Content-Type: image/jpeg\r\n\r\n".data(using: .utf8)!)
        body.append(initImageData)
        body.append("\r\n".data(using: .utf8)!)
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º body
        body.append("--\(boundary)--\r\n".data(using: .utf8)!)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        requestPost.httpBody = body
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        URLSession.shared.dataTask(with: requestPost) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                    completion(nil)
                    return
                }
                
                guard let data = data else {
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                    completion(nil)
                    return
                }
                
                do {
                    let firstResponse = try JSONDecoder().decode(FirstResponse.self, from: data)
                    
                    guard firstResponse.success, firstResponse.data.error_code == 0 else {
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ: \(firstResponse.data.error_detail.message)")
                        completion(nil)
                        return
                    }
                    
                    let taskID = firstResponse.data.task_id
                    print("‚úÖ POST-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω task_id: \(taskID)")
                    fetchImageURL(taskID: taskID, completion: completion)
                    
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ JSON: \(error)\nResponse data:\n\(String(data: data, encoding: .utf8) ?? "")")
                    completion(nil)
                }
            }
        }.resume()
        
        func fetchImageURL(taskID: String, completion: @escaping (UIImage?) -> Void) {
            let urlString = "=\(taskID)"
            guard let url = URL(string: urlString) else {
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")
                completion(nil)
                return
            }

            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

            URLSession.shared.dataTask(with: url) { data, response, error in
                DispatchQueue.main.async {
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                        completion(nil)
                        return
                    }

                    guard let data = data else {
                        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                        completion(nil)
                        return
                    }

                    do {
                        let secondResponse = try JSONDecoder().decode(SecondResponse.self, from: data)

                        guard secondResponse.success else {
                            print("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–µ: –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è")
                            completion(nil)
                            return
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º task_status
                        if secondResponse.data.task_status != 2 {
                            print("‚è≥ –ó–∞–¥–∞—á–∞ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                            DispatchQueue.global().asyncAfter(deadline: .now() + 2) {
                                fetchImageURL(taskID: taskID, completion: completion)
                            }
                            return
                        }

                        // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        guard let imageURLString = secondResponse.data.data?.images.first,
                              let imageURL = URL(string: imageURLString) else {
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                            completion(nil)
                            return
                        }

                        print("‚úÖ GET-–∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(imageURLString)")
                        downloadImage(from: imageURL, completion: completion)

                    } catch {
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ JSON: \(error)\nResponse data:\n\(String(data: data, encoding: .utf8) ?? "")")
                        completion(nil)
                    }
                }
            }.resume()
        }


        
        @Sendable func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {
            print("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: \(url.absoluteString)")
            
            URLSession.shared.dataTask(with: url) { data, _, error in
                DispatchQueue.main.async {
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(error.localizedDescription)")
                        completion(nil)
                        return
                    }
                    
                    guard let imageData = data, let image = UIImage(data: imageData) else {
                        print("‚ùå –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                        completion(nil)
                        return
                    }
                    
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
                    Self.hairstyleRequestsCount += 1
                    completion(image)
                }
            }.resume()
        }
    }
    
    struct FirstResponse: Decodable {
        let success: Bool
        let data: FirstResponseData
    }
    
    struct FirstResponseData: Decodable {
        let error_code: Int
        let error_detail: ErrorDetail
        let task_id: String
        let task_type: String
    }
    
    struct ErrorDetail: Decodable {
        let status_code: Int
        let code: String
        let code_message: String
        let message: String
    }
    
    struct SecondResponse: Decodable {
        let success: Bool
        let data: SecondResponseData
    }
    
    struct SecondResponseData: Decodable {
        let data: ImageData?
        let error_code: Int
        let error_detail: ErrorDetail
        let error_msg: String?
        let task_status: Int
    }
    
    struct ImageData: Decodable {
        let images: [String]
    }
    
}

